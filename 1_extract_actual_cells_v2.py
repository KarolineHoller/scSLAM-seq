import pysam
import sys
import pdb
import os

#this extracts reads that map to a valid cell (from a given list of valid barcodes) from a sorted and indexed .bam and writes them to a .sam file
#Author: Anika Neuschulz

if len(sys.argv) == 4:
    ifn = sys.argv[1]
    cell_barcode_file = sys.argv[2]
    mapper = sys.argv[3]
else:
    print("Please provide me with (1st) a .bam file to extract reads from, (2nd) a file with valid barcodes and (3rd) if a barcode-file generated by cellranger is used for STAR mapped data (Y/N).")
    sys.exit()


scriptpath = os.path.abspath(sys.argv[0])
scriptdir = "/".join(scriptpath.split("/")[:-1])


#this is a set instead of a list because that is faster for membership tests
cell_barcodes = {line.rstrip("\n") for line in open(cell_barcode_file)}


bamfile = pysam.AlignmentFile(ifn, "rb")

ofn = ifn[:-4] + "_actual_cells.sam"

reads_out = pysam.AlignmentFile(ofn, "w", template = bamfile)




reads_written = 0
sys.stdout.write('0 reads written')
    #we do this check here, so it does not run for every single read, for CR trailing -1 has to be removed
if mapper == "Y":
    for read in bamfile.fetch():
        try:
            if read.get_tag("CB")[:-2] in cell_barcodes:
                reads_out.write(read)
                reads_written+=1
                sys.stdout.write('\r' + str(reads_written) + ' reads written.')
        except KeyError:
                #this catches reads with barcodes that could not be matched to a valid barcode
            pass
else:
    for read in bamfile.fetch():
        try:
            if read.get_tag("CB") in cell_barcodes:
                reads_out.write(read)
                reads_written+=1
                sys.stdout.write('\r' + str(reads_written) + ' reads written.')
        except KeyError:
            #this catches reads with barcodes that could not be matched to a valid barcode
                pass

reads_out.close()
